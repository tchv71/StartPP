# -*- CMakeLists.txt generated by CodeLite IDE. Do not edit by hand -*-

cmake_minimum_required(VERSION 2.8.11)

# Project name
project(StartPP)
set (CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/CMake")
include(cotire)
#set(COTIRE_DEBUG TRUE)
# This setting is useful for providing JSON file used by CodeLite for code completion
set(CMAKE_EXPORT_COMPILE_COMMANDS 1)

# Set default locations
set(CL_OUTPUT_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}//cmake-build-Debug/output)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})

set(CONFIGURATION_NAME "Debug")
set(CMAKE_BUILD_TYPE "Debug")

set(GDK_GL "legacy")
#set(#GDK_BACKEND "x11")

# Projects


# Top project
# Define some variables
set(PROJECT_StartPP_PATH "${CMAKE_CURRENT_LIST_DIR}")
set(WORKSPACE_PATH "${CMAKE_CURRENT_LIST_DIR}/")



#{{{{ User Code 1
# Place your code here
#}}}}

include_directories(
    .
    /usr/include
    /usr/include/freetype2
    /usr/include/gtk-3.0
    /usr/lib/x86_64-linux-gnu/glib-2.0/include
    /usr/include/glib-2.0
    /usr/include/pango-1.0
    /usr/include/cairo
    /usr/include/gdk-pixbuf-2.0/
    /usr/include/atk-1.0
    /usr/local/lib/wx/include/gtk3-unicode-3.1
    /usr/local/include/wx-3.1
)


# Compiler options
execute_process(COMMAND
    /usr/local/bin/wx-config --cxxflags --debug=yes --static=no --toolkit=gtk3
    OUTPUT_VARIABLE
    CL_TMP_VAR
    OUTPUT_STRIP_TRAILING_WHITESPACE)
string(STRIP ${CL_TMP_VAR} CL_VAR_1)
add_definitions(${CL_VAR_1})
add_definitions(-std=c++11)
add_definitions(-g)
add_definitions(-O0)
add_definitions(-Wall)
add_definitions(
    -D_MAX_PATH=260
    -D_FILE_OFFSET_BITS=64
    -DWXUSINGDLL
    -D__WXGTK__
)


# Linker options
execute_process(COMMAND 
    /usr/local/bin/wx-config --libs std,gl,propgrid,aui --static=no --debug=yes  --toolkit=gtk3
    OUTPUT_VARIABLE
    CL_TMP_VAR
    OUTPUT_STRIP_TRAILING_WHITESPACE)
string(STRIP ${CL_TMP_VAR} CL_VAR_3)
set(LINK_OPTIONS ${CL_VAR_3})


if(WIN32)
    # Resource options
    execute_process(COMMAND 
        /usr/local/lib/wx-config --rcflags
        OUTPUT_VARIABLE
        CL_TMP_VAR
        OUTPUT_STRIP_TRAILING_WHITESPACE)
    string(STRIP ${CL_TMP_VAR} CL_VAR_4)
    set(RC_OPTIONS ${CL_VAR_4})
endif(WIN32)

# Library path
set(CMAKE_LDFLAGS "${CMAKE_LDFLAGS} -L. ")

# Define the C sources
set ( C_SRCS
    ${CMAKE_CURRENT_LIST_DIR}/dbf.c
    ${CMAKE_CURRENT_LIST_DIR}/ioapi/ioapi.c
)

# Define the CXX sources
set ( CXX_SRCS
    ${CMAKE_CURRENT_LIST_DIR}/wxcrafter_bitmaps.cpp
    ${CMAKE_CURRENT_LIST_DIR}/ArmatSet.cpp
    ${CMAKE_CURRENT_LIST_DIR}/MultPipeDialog.cpp
    ${CMAKE_CURRENT_LIST_DIR}/MoveNodeDialog.cpp
    ${CMAKE_CURRENT_LIST_DIR}/PipeDescDialog.cpp
    ${CMAKE_CURRENT_LIST_DIR}/Recordset.cpp
    ${CMAKE_CURRENT_LIST_DIR}/CPropValued.cpp
    ${CMAKE_CURRENT_LIST_DIR}/AddSchemDialog.cpp
    ${CMAKE_CURRENT_LIST_DIR}/PipeAndNode.cpp
    ${CMAKE_CURRENT_LIST_DIR}/wxGLCanvasViewWnd.cpp
    ${CMAKE_CURRENT_LIST_DIR}/TroinicsTableDlg.cpp
    ${CMAKE_CURRENT_LIST_DIR}/ArmatTableDlg.cpp
    ${CMAKE_CURRENT_LIST_DIR}/Rotate.cpp
    ${CMAKE_CURRENT_LIST_DIR}/StartPPDoc.cpp
    ${CMAKE_CURRENT_LIST_DIR}/PipePresenter.cpp
    ${CMAKE_CURRENT_LIST_DIR}/TableDlg.cpp
    ${CMAKE_CURRENT_LIST_DIR}/MySet.cpp
    ${CMAKE_CURRENT_LIST_DIR}/Material.cpp
    ${CMAKE_CURRENT_LIST_DIR}/dbf_wx.cpp
    ${CMAKE_CURRENT_LIST_DIR}/main.cpp
    ${CMAKE_CURRENT_LIST_DIR}/StartPPView.cpp
    ${CMAKE_CURRENT_LIST_DIR}/TempHistory.cpp
    ${CMAKE_CURRENT_LIST_DIR}/PipeTable.cpp
    ${CMAKE_CURRENT_LIST_DIR}/wxcrafter.cpp
    ${CMAKE_CURRENT_LIST_DIR}/PipeArray.cpp
    ${CMAKE_CURRENT_LIST_DIR}/Pipe.cpp
    ${CMAKE_CURRENT_LIST_DIR}/PipesTableDlg.cpp
    ${CMAKE_CURRENT_LIST_DIR}/PipesSet.cpp
    ${CMAKE_CURRENT_LIST_DIR}/PropertiesWnd.cpp
    ${CMAKE_CURRENT_LIST_DIR}/TroinicsSet.cpp
    ${CMAKE_CURRENT_LIST_DIR}/wx/src/wxstreamc.cpp
    ${CMAKE_CURRENT_LIST_DIR}/PipeDesc.cpp
    ${CMAKE_CURRENT_LIST_DIR}/SpuskDialog.cpp
    ${CMAKE_CURRENT_LIST_DIR}/HSV2RGB.cpp
    ${CMAKE_CURRENT_LIST_DIR}/ScreenPipePresenter.cpp
    ${CMAKE_CURRENT_LIST_DIR}/PrintHelper.cpp
    ${CMAKE_CURRENT_LIST_DIR}/NewPipeDialog.cpp
    ${CMAKE_CURRENT_LIST_DIR}/PipeGrid.cpp
    ${CMAKE_CURRENT_LIST_DIR}/Archive.cpp
    ${CMAKE_CURRENT_LIST_DIR}/GLFontRenderer.cpp
    ${CMAKE_CURRENT_LIST_DIR}/CopyParamsDialog.cpp
    ${CMAKE_CURRENT_LIST_DIR}/OGLPipePresenter.cpp
    ${CMAKE_CURRENT_LIST_DIR}/DibGlSurface.cpp
    ${CMAKE_CURRENT_LIST_DIR}/VecPnN.cpp
    ${CMAKE_CURRENT_LIST_DIR}/NewNodeDialog.cpp
    ${CMAKE_CURRENT_LIST_DIR}/StartPPSet.cpp
    ${CMAKE_CURRENT_LIST_DIR}/MainFrame.cpp
    ${CMAKE_CURRENT_LIST_DIR}/DelPipesDialog.cpp
    ${CMAKE_CURRENT_LIST_DIR}/DistDialog.cpp
)

if(WIN32)
    # Define the resource files
    set ( RC_SRCS
        ${CMAKE_CURRENT_LIST_DIR}/win_resources.rc
        ${CMAKE_CURRENT_LIST_DIR}/StartPP.rc
    )
endif(WIN32)

#set_source_files_properties(
#    ${CXX_SRCS} PROPERTIES COMPILE_FLAGS
#    " -std=c++11 -g -O0 -std=c++11 -pthread")

set_source_files_properties(
    ${C_SRCS} PROPERTIES COMPILE_FLAGS 
    " -g -O0 -Wall -pthread")

if(WIN32)
    enable_language(RC)
    set(CMAKE_RC_COMPILE_OBJECT
        "<CMAKE_RC_COMPILER> ${RC_OPTIONS} -O coff -i <SOURCE> -o <OBJECT>")
endif(WIN32)



#{{{{ User Code 2
# Place your code here
#}}}}

add_library(StartPP_C ${C_SRCS})
target_compile_options(StartPP_C PUBLIC -g -O0 -pthread -D__WXGTK__ -D_MAX_PATH=260 -DWXUSINGDLL)
add_executable(StartPP ${CXX_SRCS})
target_link_libraries(StartPP ${LINK_OPTIONS})
target_compile_options(StartPP PUBLIC -std=c++11 -g -O0 -pthread -D__WXGTK__ -D_MAX_PATH=260 -DWXUSINGDLL)
set_target_properties(StartPP PROPERTIES COTIRE_CXX_PREFIX_HEADER_INIT "stdafx.h")
set_target_properties(StartPP PROPERTIES COTIRE_ADD_UNITY_BUILD FALSE)
#set_target_properties(StartPP PROPERTIES COTIRE_ENABLE_PRECOMPILED_HEADER FALSE)
cotire(StartPP)

target_link_libraries(StartPP
    GL
    GLU
    ftgl
    X11
    gdk-3
    freetype
    StartPP_C
)



#{{{{ User Code 3
# Place your code here
#}}}}

